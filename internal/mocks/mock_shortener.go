// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/grnsv/shortener/internal/service (interfaces: Shortener,URLShortener,BatchShortener,URLExpander,StoragePinger,URLLister,URLDeleter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/grnsv/shortener/internal/models"
)

// MockShortener is a mock of Shortener interface.
type MockShortener struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerMockRecorder
}

// MockShortenerMockRecorder is the mock recorder for MockShortener.
type MockShortenerMockRecorder struct {
	mock *MockShortener
}

// NewMockShortener creates a new mock instance.
func NewMockShortener(ctrl *gomock.Controller) *MockShortener {
	mock := &MockShortener{ctrl: ctrl}
	mock.recorder = &MockShortenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortener) EXPECT() *MockShortenerMockRecorder {
	return m.recorder
}

// DeleteMany mocks base method.
func (m *MockShortener) DeleteMany(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockShortenerMockRecorder) DeleteMany(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockShortener)(nil).DeleteMany), arg0, arg1, arg2)
}

// ExpandURL mocks base method.
func (m *MockShortener) ExpandURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandURL indicates an expected call of ExpandURL.
func (mr *MockShortenerMockRecorder) ExpandURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandURL", reflect.TypeOf((*MockShortener)(nil).ExpandURL), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockShortener) GetAll(arg0 context.Context, arg1 string) ([]models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].([]models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockShortenerMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockShortener)(nil).GetAll), arg0, arg1)
}

// PingStorage mocks base method.
func (m *MockShortener) PingStorage(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingStorage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingStorage indicates an expected call of PingStorage.
func (mr *MockShortenerMockRecorder) PingStorage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingStorage", reflect.TypeOf((*MockShortener)(nil).PingStorage), arg0)
}

// ShortenBatch mocks base method.
func (m *MockShortener) ShortenBatch(arg0 context.Context, arg1 models.BatchRequest, arg2 string) (models.BatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenBatch indicates an expected call of ShortenBatch.
func (mr *MockShortenerMockRecorder) ShortenBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenBatch", reflect.TypeOf((*MockShortener)(nil).ShortenBatch), arg0, arg1, arg2)
}

// ShortenURL mocks base method.
func (m *MockShortener) ShortenURL(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenURL indicates an expected call of ShortenURL.
func (mr *MockShortenerMockRecorder) ShortenURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenURL", reflect.TypeOf((*MockShortener)(nil).ShortenURL), arg0, arg1, arg2)
}

// MockURLShortener is a mock of URLShortener interface.
type MockURLShortener struct {
	ctrl     *gomock.Controller
	recorder *MockURLShortenerMockRecorder
}

// MockURLShortenerMockRecorder is the mock recorder for MockURLShortener.
type MockURLShortenerMockRecorder struct {
	mock *MockURLShortener
}

// NewMockURLShortener creates a new mock instance.
func NewMockURLShortener(ctrl *gomock.Controller) *MockURLShortener {
	mock := &MockURLShortener{ctrl: ctrl}
	mock.recorder = &MockURLShortenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLShortener) EXPECT() *MockURLShortenerMockRecorder {
	return m.recorder
}

// ShortenURL mocks base method.
func (m *MockURLShortener) ShortenURL(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenURL indicates an expected call of ShortenURL.
func (mr *MockURLShortenerMockRecorder) ShortenURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenURL", reflect.TypeOf((*MockURLShortener)(nil).ShortenURL), arg0, arg1, arg2)
}

// MockBatchShortener is a mock of BatchShortener interface.
type MockBatchShortener struct {
	ctrl     *gomock.Controller
	recorder *MockBatchShortenerMockRecorder
}

// MockBatchShortenerMockRecorder is the mock recorder for MockBatchShortener.
type MockBatchShortenerMockRecorder struct {
	mock *MockBatchShortener
}

// NewMockBatchShortener creates a new mock instance.
func NewMockBatchShortener(ctrl *gomock.Controller) *MockBatchShortener {
	mock := &MockBatchShortener{ctrl: ctrl}
	mock.recorder = &MockBatchShortenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchShortener) EXPECT() *MockBatchShortenerMockRecorder {
	return m.recorder
}

// ShortenBatch mocks base method.
func (m *MockBatchShortener) ShortenBatch(arg0 context.Context, arg1 models.BatchRequest, arg2 string) (models.BatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenBatch indicates an expected call of ShortenBatch.
func (mr *MockBatchShortenerMockRecorder) ShortenBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenBatch", reflect.TypeOf((*MockBatchShortener)(nil).ShortenBatch), arg0, arg1, arg2)
}

// MockURLExpander is a mock of URLExpander interface.
type MockURLExpander struct {
	ctrl     *gomock.Controller
	recorder *MockURLExpanderMockRecorder
}

// MockURLExpanderMockRecorder is the mock recorder for MockURLExpander.
type MockURLExpanderMockRecorder struct {
	mock *MockURLExpander
}

// NewMockURLExpander creates a new mock instance.
func NewMockURLExpander(ctrl *gomock.Controller) *MockURLExpander {
	mock := &MockURLExpander{ctrl: ctrl}
	mock.recorder = &MockURLExpanderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLExpander) EXPECT() *MockURLExpanderMockRecorder {
	return m.recorder
}

// ExpandURL mocks base method.
func (m *MockURLExpander) ExpandURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandURL indicates an expected call of ExpandURL.
func (mr *MockURLExpanderMockRecorder) ExpandURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandURL", reflect.TypeOf((*MockURLExpander)(nil).ExpandURL), arg0, arg1)
}

// MockStoragePinger is a mock of StoragePinger interface.
type MockStoragePinger struct {
	ctrl     *gomock.Controller
	recorder *MockStoragePingerMockRecorder
}

// MockStoragePingerMockRecorder is the mock recorder for MockStoragePinger.
type MockStoragePingerMockRecorder struct {
	mock *MockStoragePinger
}

// NewMockStoragePinger creates a new mock instance.
func NewMockStoragePinger(ctrl *gomock.Controller) *MockStoragePinger {
	mock := &MockStoragePinger{ctrl: ctrl}
	mock.recorder = &MockStoragePingerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoragePinger) EXPECT() *MockStoragePingerMockRecorder {
	return m.recorder
}

// PingStorage mocks base method.
func (m *MockStoragePinger) PingStorage(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingStorage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingStorage indicates an expected call of PingStorage.
func (mr *MockStoragePingerMockRecorder) PingStorage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingStorage", reflect.TypeOf((*MockStoragePinger)(nil).PingStorage), arg0)
}

// MockURLLister is a mock of URLLister interface.
type MockURLLister struct {
	ctrl     *gomock.Controller
	recorder *MockURLListerMockRecorder
}

// MockURLListerMockRecorder is the mock recorder for MockURLLister.
type MockURLListerMockRecorder struct {
	mock *MockURLLister
}

// NewMockURLLister creates a new mock instance.
func NewMockURLLister(ctrl *gomock.Controller) *MockURLLister {
	mock := &MockURLLister{ctrl: ctrl}
	mock.recorder = &MockURLListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLLister) EXPECT() *MockURLListerMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockURLLister) GetAll(arg0 context.Context, arg1 string) ([]models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].([]models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockURLListerMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockURLLister)(nil).GetAll), arg0, arg1)
}

// MockURLDeleter is a mock of URLDeleter interface.
type MockURLDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockURLDeleterMockRecorder
}

// MockURLDeleterMockRecorder is the mock recorder for MockURLDeleter.
type MockURLDeleterMockRecorder struct {
	mock *MockURLDeleter
}

// NewMockURLDeleter creates a new mock instance.
func NewMockURLDeleter(ctrl *gomock.Controller) *MockURLDeleter {
	mock := &MockURLDeleter{ctrl: ctrl}
	mock.recorder = &MockURLDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLDeleter) EXPECT() *MockURLDeleterMockRecorder {
	return m.recorder
}

// DeleteMany mocks base method.
func (m *MockURLDeleter) DeleteMany(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockURLDeleterMockRecorder) DeleteMany(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockURLDeleter)(nil).DeleteMany), arg0, arg1, arg2)
}
